// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator/contracts.go
//
// Generated by this command:
//
//	mockgen -source=./validator/contracts.go -destination=./validator/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	validator "github.com/go-playground/validator/v10"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomValidator is a mock of CustomValidator interface.
type MockCustomValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCustomValidatorMockRecorder
}

// MockCustomValidatorMockRecorder is the mock recorder for MockCustomValidator.
type MockCustomValidatorMockRecorder struct {
	mock *MockCustomValidator
}

// NewMockCustomValidator creates a new mock instance.
func NewMockCustomValidator(ctrl *gomock.Controller) *MockCustomValidator {
	mock := &MockCustomValidator{ctrl: ctrl}
	mock.recorder = &MockCustomValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomValidator) EXPECT() *MockCustomValidatorMockRecorder {
	return m.recorder
}

// Func mocks base method.
func (m *MockCustomValidator) Func() validator.Func {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Func")
	ret0, _ := ret[0].(validator.Func)
	return ret0
}

// Func indicates an expected call of Func.
func (mr *MockCustomValidatorMockRecorder) Func() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Func", reflect.TypeOf((*MockCustomValidator)(nil).Func))
}

// Tag mocks base method.
func (m *MockCustomValidator) Tag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockCustomValidatorMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockCustomValidator)(nil).Tag))
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(ctx context.Context, s any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), ctx, s)
}
